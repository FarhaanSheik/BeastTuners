// <auto-generated />
using System;
using BeastTuners.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeastTuners.Migrations
{
    [DbContext(typeof(BeastTunersContext))]
    partial class BeastTunersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeastTuners.Areas.Identity.Data.BeastTunersUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            Address = "1 Main Street",
                            ConcurrencyStamp = "08b82f4a-7b7c-4f43-8b1e-1264715a6a7f",
                            Email = "John@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@GMAIL.COM",
                            NormalizedUserName = "JOHN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM0UuN5EpdxSR+MzdMMGx7iJTfWz3r2/4yL1WhPzDmE2wOWKa5wPHBG0a6D+0M/LXA==",
                            PhoneNumber = "0210000001",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e84ce2c8-b720-4446-be24-fb71fc0fb851",
                            TwoFactorEnabled = false,
                            UserName = "John@gmail.com",
                            UserType = "Customer"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            Address = "2 Oak Road",
                            ConcurrencyStamp = "78712319-1b6d-4ba3-af33-e428cfe63fed",
                            Email = "Alice@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE@YAHOO.COM",
                            NormalizedUserName = "ALICE@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELoFshJ1c5fpltAkOuItXPZJpjL0hd5v/vlAofX3ivCYFCNiIJdf6F26QGKow47Gog==",
                            PhoneNumber = "0210000002",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fffac4f-8687-47b5-8e93-db2751d1aeb5",
                            TwoFactorEnabled = false,
                            UserName = "Alice@yahoo.com",
                            UserType = "Customer"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            Address = "3 Beachside Ave",
                            ConcurrencyStamp = "4b86297e-3f39-4203-98d6-f27374a11643",
                            Email = "Ethan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ethan",
                            LastName = "Williams",
                            LockoutEnabled = false,
                            NormalizedEmail = "ETHAN@GMAIL.COM",
                            NormalizedUserName = "ETHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJy6f2mCc38NRQDl4ZyfdRCFmr328ByR6yPx8gup4bq96E6ayp66dJaAxqn0L0sv2g==",
                            PhoneNumber = "0210000003",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e87be25-a786-4cfe-9f21-2d1be452f81d",
                            TwoFactorEnabled = false,
                            UserName = "Ethan@gmail.com",
                            UserType = "Customer"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            Address = "4 Valley Rd",
                            ConcurrencyStamp = "cb1d7a68-82c2-46c6-a01a-b84a9c35b5f9",
                            Email = "Sarah@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH@GMAIL.COM",
                            NormalizedUserName = "SARAH@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENHG55zkUVfp5/bGg+czLZFeTN5Y1lu1HV6C359g668D2PeiCYNNYqAGEdfTZxfgIw==",
                            PhoneNumber = "0210000004",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f86bdb13-ce02-4e0b-a453-8f70f2b98951",
                            TwoFactorEnabled = false,
                            UserName = "Sarah@gmail.com",
                            UserType = "Customer"
                        },
                        new
                        {
                            Id = "user5",
                            AccessFailedCount = 0,
                            Address = "5 Racecourse Rd",
                            ConcurrencyStamp = "961cee23-777b-4121-9588-d79854d299d8",
                            Email = "James@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Nguyen",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "JAMES@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN4WUy62qpZ3w3mknuMTacJt+M1q04bMO1+pXwz5hhDAE2aGRlS9GsFT4vdUuvy7cQ==",
                            PhoneNumber = "0210000005",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6385b6c-0765-4ec7-9650-f99d55cfdab0",
                            TwoFactorEnabled = false,
                            UserName = "James@gmail.com",
                            UserType = "Customer"
                        });
                });

            modelBuilder.Entity("BeastTuners.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemID"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartID")
                        .HasColumnType("int");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemID");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("BeastTuners.Models.InventoryAdjustment", b =>
                {
                    b.Property<int>("AdjustmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdjustmentID"));

                    b.Property<DateTime>("AdjustmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdjustmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PartID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AdjustmentID");

                    b.HasIndex("PartID");

                    b.ToTable("InventoryAdjustment");

                    b.HasData(
                        new
                        {
                            AdjustmentID = 1,
                            AdjustmentDate = new DateTime(2025, 5, 12, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(5609),
                            AdjustmentType = "Restock",
                            PartID = 1,
                            Quantity = 20,
                            Reason = "Monthly replenishment"
                        },
                        new
                        {
                            AdjustmentID = 2,
                            AdjustmentDate = new DateTime(2025, 5, 15, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(5762),
                            AdjustmentType = "Damaged",
                            PartID = 2,
                            Quantity = -3,
                            Reason = "Damaged in delivery"
                        },
                        new
                        {
                            AdjustmentID = 3,
                            AdjustmentDate = new DateTime(2025, 5, 17, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(5766),
                            AdjustmentType = "Restock",
                            PartID = 3,
                            Quantity = 10,
                            Reason = "Supplier delivery"
                        },
                        new
                        {
                            AdjustmentID = 4,
                            AdjustmentDate = new DateTime(2025, 5, 19, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(5769),
                            AdjustmentType = "Manual Correction",
                            PartID = 4,
                            Quantity = 5,
                            Reason = "Stock correction"
                        },
                        new
                        {
                            AdjustmentID = 5,
                            AdjustmentDate = new DateTime(2025, 5, 22, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(5772),
                            AdjustmentType = "Restock",
                            PartID = 5,
                            Quantity = 12,
                            Reason = "New shipment"
                        });
                });

            modelBuilder.Entity("BeastTuners.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("PartID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PartID");

                    b.ToTable("OrderDetail");

                    b.HasData(
                        new
                        {
                            OrderDetailID = 1,
                            OrderID = 1,
                            PartID = 1,
                            Quantity = 2,
                            UnitPrice = 75.00m
                        },
                        new
                        {
                            OrderDetailID = 2,
                            OrderID = 1,
                            PartID = 2,
                            Quantity = 1,
                            UnitPrice = 300.00m
                        },
                        new
                        {
                            OrderDetailID = 3,
                            OrderID = 2,
                            PartID = 3,
                            Quantity = 2,
                            UnitPrice = 60.00m
                        },
                        new
                        {
                            OrderDetailID = 4,
                            OrderID = 3,
                            PartID = 1,
                            Quantity = 4,
                            UnitPrice = 75.00m
                        },
                        new
                        {
                            OrderDetailID = 5,
                            OrderID = 3,
                            PartID = 4,
                            Quantity = 1,
                            UnitPrice = 150.00m
                        },
                        new
                        {
                            OrderDetailID = 6,
                            OrderID = 4,
                            PartID = 5,
                            Quantity = 2,
                            UnitPrice = 87.75m
                        },
                        new
                        {
                            OrderDetailID = 7,
                            OrderID = 5,
                            PartID = 2,
                            Quantity = 1,
                            UnitPrice = 220.00m
                        });
                });

            modelBuilder.Entity("BeastTuners.Models.OrderResult", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("OrderResult");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            OrderDate = new DateTime(2025, 5, 17, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(5929),
                            Status = "Completed",
                            TotalAmount = 495.00m,
                            UserID = "user1"
                        },
                        new
                        {
                            OrderID = 2,
                            OrderDate = new DateTime(2025, 5, 18, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(5958),
                            Status = "Pending",
                            TotalAmount = 120.00m,
                            UserID = "user2"
                        },
                        new
                        {
                            OrderID = 3,
                            OrderDate = new DateTime(2025, 5, 19, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(5961),
                            Status = "Completed",
                            TotalAmount = 450.00m,
                            UserID = "user3"
                        },
                        new
                        {
                            OrderID = 4,
                            OrderDate = new DateTime(2025, 5, 20, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(5968),
                            Status = "Pending",
                            TotalAmount = 175.50m,
                            UserID = "user4"
                        },
                        new
                        {
                            OrderID = 5,
                            OrderDate = new DateTime(2025, 5, 21, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(5971),
                            Status = "Cancelled",
                            TotalAmount = 220.00m,
                            UserID = "user5"
                        });
                });

            modelBuilder.Entity("BeastTuners.Models.Part", b =>
                {
                    b.Property<int>("PartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("PartID");

                    b.ToTable("Part");

                    b.HasData(
                        new
                        {
                            PartID = 1,
                            Category = "Brakes",
                            Description = "High-performance brake pads for sports cars",
                            ImagePath = "/images/performanceBrakePad.jpg",
                            PartName = "Performance Brake Pads",
                            Price = 120.00m,
                            StockQuantity = 50
                        },
                        new
                        {
                            PartID = 2,
                            Category = "Wheels",
                            Description = "Stylish and durable alloy wheels",
                            ImagePath = "/images/wheels19'.jpg",
                            PartName = "Alloy Wheels 17\"",
                            Price = 480.00m,
                            StockQuantity = 20
                        },
                        new
                        {
                            PartID = 3,
                            Category = "Engine",
                            Description = "Powerful V8 engine block for muscle cars",
                            ImagePath = "/images/v8Engine.jpg",
                            PartName = "V8 Engine Block",
                            Price = 2500.00m,
                            StockQuantity = 5
                        },
                        new
                        {
                            PartID = 4,
                            Category = "Engine",
                            Description = "Improves airflow and boosts horsepower",
                            ImagePath = "/images/Intake.jpg",
                            PartName = "Cold Air Intake",
                            Price = 200.00m,
                            StockQuantity = 15
                        },
                        new
                        {
                            PartID = 5,
                            Category = "Exterior",
                            Description = "Lightweight and aerodynamic hood",
                            ImagePath = "/images/Hood.jpg",
                            PartName = "Carbon Fiber Hood",
                            Price = 950.00m,
                            StockQuantity = 3
                        },
                        new
                        {
                            PartID = 6,
                            Category = "Suspension",
                            Description = "Adjustable ride height and improved handling",
                            ImagePath = "/images/coilsuspension.jpg",
                            PartName = "Coilover Suspension Kit",
                            Price = 850.00m,
                            StockQuantity = 8
                        },
                        new
                        {
                            PartID = 7,
                            Category = "Exhaust",
                            Description = "Enhances engine performance and sound",
                            ImagePath = "/images/Subi exhaust.jpg",
                            PartName = "High Flow Exhaust",
                            Price = 499.99m,
                            StockQuantity = 10
                        },
                        new
                        {
                            PartID = 8,
                            Category = "Interior",
                            Description = "Lightweight and secure racing seats",
                            ImagePath = "/images/Seats.jpg",
                            PartName = "Bucket Racing Seats",
                            Price = 750.00m,
                            StockQuantity = 6
                        },
                        new
                        {
                            PartID = 9,
                            Category = "Interior",
                            Description = "Smart infotainment system for modern cars",
                            ImagePath = "/images/Display.jpg",
                            PartName = "Touchscreen Dash Display",
                            Price = 300.00m,
                            StockQuantity = 12
                        },
                        new
                        {
                            PartID = 10,
                            Category = "Brakes",
                            Description = "Enhanced cooling and stopping power",
                            ImagePath = "/images/Rotor.jpg",
                            PartName = "Slotted Rotors",
                            Price = 180.00m,
                            StockQuantity = 25
                        });
                });

            modelBuilder.Entity("BeastTuners.Models.PartSupplier", b =>
                {
                    b.Property<int>("PartSuppliersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartSuppliersID"));

                    b.Property<int>("PartID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("PartSuppliersID");

                    b.HasIndex("PartID");

                    b.HasIndex("SupplierID");

                    b.ToTable("PartSupplier");

                    b.HasData(
                        new
                        {
                            PartSuppliersID = 1,
                            PartID = 1,
                            SupplierID = 1
                        },
                        new
                        {
                            PartSuppliersID = 2,
                            PartID = 2,
                            SupplierID = 2
                        },
                        new
                        {
                            PartSuppliersID = 3,
                            PartID = 3,
                            SupplierID = 3
                        },
                        new
                        {
                            PartSuppliersID = 4,
                            PartID = 4,
                            SupplierID = 4
                        },
                        new
                        {
                            PartSuppliersID = 5,
                            PartID = 5,
                            SupplierID = 5
                        },
                        new
                        {
                            PartSuppliersID = 6,
                            PartID = 1,
                            SupplierID = 2
                        },
                        new
                        {
                            PartSuppliersID = 7,
                            PartID = 2,
                            SupplierID = 3
                        },
                        new
                        {
                            PartSuppliersID = 8,
                            PartID = 3,
                            SupplierID = 4
                        },
                        new
                        {
                            PartSuppliersID = 9,
                            PartID = 4,
                            SupplierID = 5
                        },
                        new
                        {
                            PartSuppliersID = 10,
                            PartID = 5,
                            SupplierID = 1
                        });
                });

            modelBuilder.Entity("BeastTuners.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SupplierID");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            SupplierID = 1,
                            Address = "88 Workshop Lane",
                            PhoneNumber = "0800123456",
                            SupplierName = "AutoParts NZ"
                        },
                        new
                        {
                            SupplierID = 2,
                            Address = "42 Mechanics Rd",
                            PhoneNumber = "0800456789",
                            SupplierName = "GearCo"
                        },
                        new
                        {
                            SupplierID = 3,
                            Address = "12 Industrial Rd",
                            PhoneNumber = "0211112222",
                            SupplierName = "AutoZone Supplies"
                        },
                        new
                        {
                            SupplierID = 4,
                            Address = "88 Speedway Ave",
                            PhoneNumber = "0213334444",
                            SupplierName = "SpeedParts NZ"
                        },
                        new
                        {
                            SupplierID = 5,
                            Address = "5 Workshop Lane",
                            PhoneNumber = "0215556666",
                            SupplierName = "MotorTech Ltd"
                        });
                });

            modelBuilder.Entity("BeastTuners.Models.SuppliersDelivery", b =>
                {
                    b.Property<int>("SupplierDeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierDeliveryID"));

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("SupplierDeliveryID");

                    b.HasIndex("PartID");

                    b.HasIndex("SupplierID");

                    b.ToTable("SuppliersDelivery");

                    b.HasData(
                        new
                        {
                            SupplierDeliveryID = 1,
                            DeliveryTime = new DateTime(2025, 5, 12, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(6315),
                            PartID = 1,
                            SupplierID = 1
                        },
                        new
                        {
                            SupplierDeliveryID = 2,
                            DeliveryTime = new DateTime(2025, 5, 17, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(6319),
                            PartID = 2,
                            SupplierID = 2
                        },
                        new
                        {
                            SupplierDeliveryID = 3,
                            DeliveryTime = new DateTime(2025, 5, 22, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(6322),
                            PartID = 3,
                            SupplierID = 3
                        },
                        new
                        {
                            SupplierDeliveryID = 4,
                            DeliveryTime = new DateTime(2025, 5, 20, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(6325),
                            PartID = 4,
                            SupplierID = 4
                        },
                        new
                        {
                            SupplierDeliveryID = 5,
                            DeliveryTime = new DateTime(2025, 5, 24, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(6327),
                            PartID = 5,
                            SupplierID = 5
                        },
                        new
                        {
                            SupplierDeliveryID = 6,
                            DeliveryTime = new DateTime(2025, 5, 26, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(6358),
                            PartID = 2,
                            SupplierID = 1
                        },
                        new
                        {
                            SupplierDeliveryID = 7,
                            DeliveryTime = new DateTime(2025, 5, 25, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(6361),
                            PartID = 3,
                            SupplierID = 2
                        },
                        new
                        {
                            SupplierDeliveryID = 8,
                            DeliveryTime = new DateTime(2025, 5, 21, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(6364),
                            PartID = 4,
                            SupplierID = 3
                        },
                        new
                        {
                            SupplierDeliveryID = 9,
                            DeliveryTime = new DateTime(2025, 5, 19, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(6366),
                            PartID = 5,
                            SupplierID = 4
                        },
                        new
                        {
                            SupplierDeliveryID = 10,
                            DeliveryTime = new DateTime(2025, 5, 18, 18, 19, 31, 85, DateTimeKind.Local).AddTicks(6369),
                            PartID = 1,
                            SupplierID = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeastTuners.Models.InventoryAdjustment", b =>
                {
                    b.HasOne("BeastTuners.Models.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BeastTuners.Models.OrderDetail", b =>
                {
                    b.HasOne("BeastTuners.Models.OrderResult", "OrderResult")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeastTuners.Models.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderResult");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BeastTuners.Models.OrderResult", b =>
                {
                    b.HasOne("BeastTuners.Areas.Identity.Data.BeastTunersUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeastTuners.Models.PartSupplier", b =>
                {
                    b.HasOne("BeastTuners.Models.Part", "Part")
                        .WithMany("PartSuppliers")
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeastTuners.Models.Supplier", "Supplier")
                        .WithMany("PartSuppliers")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BeastTuners.Models.SuppliersDelivery", b =>
                {
                    b.HasOne("BeastTuners.Models.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeastTuners.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeastTuners.Areas.Identity.Data.BeastTunersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeastTuners.Areas.Identity.Data.BeastTunersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeastTuners.Areas.Identity.Data.BeastTunersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeastTuners.Areas.Identity.Data.BeastTunersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeastTuners.Models.OrderResult", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BeastTuners.Models.Part", b =>
                {
                    b.Navigation("PartSuppliers");
                });

            modelBuilder.Entity("BeastTuners.Models.Supplier", b =>
                {
                    b.Navigation("PartSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
